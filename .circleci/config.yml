# Use Circle CI Version 2.1 - Illustrate usage of Orb
version: 2.1

# Start - 
orbs:   
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.0.0


workflows:
  build-and-deploy-docker-image:
    jobs:
      - job-name1 
      #- job-name2          

jobs:  
  job-name1:
    machine: 
      image: ubuntu-2004:202101-01
    steps:
      - run: echo "This is Job-Job-Name1"
      - run: pwd; ls -ltr; 
      - run: uname -a      
      - run: aws --version --output text
      # AssumeRole - ASR
      - run: aws sts assume-role --role-arn arn:aws:iam::317367993082:role/bm-super --role-session-name ecr-access-x1 --output text > /tmp/test
      - run: cat /tmp/test
      - run: awk 'NR==2 {print $1 "\t" $2 "\t" $4 "\t" $5}' /tmp/test
      - run: awk_access_key=$(awk 'NR==2 {print $2}' /tmp/test); echo $(awk_access_key)
      - run: awk_secret_id=$(awk 'NR==2 {print $3}' /tmp/test); echo $(awk_secret_id)  
      - run: 
          name: Set ENV Variable
          command: |
            #aws sts assume-role --role-arn arn:aws:iam::317367993082:role/bm-super --role-session-name ecr-access-x1 --output text > test
            #cat test; pwd; awk_access_key=$(awk 'NR==2 {print $2}' ./test); awk_access_key=$(awk 'NR==2 {print $3}' ./test)          
            #echo 'export assumerole_access_key=$(awk 'NR==2 {print $2}' test)' >> $BASH_ENV
            #echo 'export assumerole_secret_id=$(awk 'NR==2 {print $3}' test)'  >> $BASH_ENV
            #source $BASH_ENV
            echo "Set ENV VAR"
      - run: env | grep -i assume*
      - run: pwd
      
      
  job-name2:
    machine: 
      image:
    steps:
       - run: echo "This is Job-Job-Name2"
      
  
      
    
    # End
